{"ast":null,"code":"import axios from \"axios\";\nconst API_URL = process.env.API_URL || \"http://localhost:3001\";\nconst api = axios.create({\n  baseURL: API_URL\n});\napi.interceptors.request.use(config => {\n  const token = localStorage.getItem(\"token\");\n  console.log(\"Token enviado na requisição:\", token);\n  if (token) {\n    config.headers.Authorization = `Bearer ${token}`;\n  }\n  return config;\n});\n\n//registrar candidato\nexport const registrarCandidato = async dados => {\n  try {\n    const response = await api.post(\"/register/candidato\", dados);\n    return response.data;\n  } catch (error) {\n    console.error(\"Erro ao registrar candidato:\", error);\n    return null;\n  }\n};\n\n//registrar empresa\nexport const registrarEmpresa = async dados => {\n  try {\n    const response = await api.post(\"/register/empresa\", dados);\n    return response.data;\n  } catch (error) {\n    console.error(\"Erro ao registrar empresa:\", error);\n    return null;\n  }\n};\n\n//logar candidato\nexport const logarCandidato = async (email, senha) => {\n  try {\n    const response = await api.post(\"/login/candidato\", {\n      email,\n      senha\n    });\n    return response.data;\n  } catch (error) {\n    console.error(\"Ocorreu um erro ao tentar logar: \", error);\n    return null;\n  }\n};\n\n//logar empresa\nexport const logarEmpresa = async (email, senha) => {\n  try {\n    const response = await api.post(\"/login/empresa\", {\n      email,\n      senha\n    });\n    return response.data;\n  } catch (error) {\n    console.error(\"Ocorreu um erro ao tentar logar\", error);\n  }\n};\n\n//criar vaga\nexport const criarVaga = async dados => {\n  try {\n    const response = await api.post(\"/publicarVaga\", dados);\n    return response.data;\n  } catch (error) {\n    console.error(\"Ocorreu erro ao tentar publicar a vaga: \", error);\n    return null;\n  }\n};\n\n//lista de vagas\nexport const listarVagas = async () => {\n  try {\n    const response = await api.get(\"/\");\n    return response.data;\n  } catch (error) {\n    console.error(\"Erro ao buscar vagas:\", error);\n    return null;\n  }\n};\n\n//candidatar-se\nexport const candidatarVaga = async (id_vaga, curriculo) => {\n  try {\n    const response = await api.post(\"/candidatar\", {\n      id_vaga,\n      curriculo\n    });\n    return response.data;\n  } catch (error) {\n    console.error(\"Erro ao se candidatar:\", error);\n    return null;\n  }\n};\n\n//listar Candidaturas\nexport const listarCandidaturas = async id_vaga => {\n  try {\n    const response = await api.get(`/candidaturas/${id_vaga}`);\n    return response.data;\n  } catch (error) {\n    console.error(\"Ocorreu um erro ao buscar candidaturas\", error);\n    return null;\n  }\n};\n\n//atualizar perfil do candidato\nexport const atualizarPerfil = async dados => {\n  try {\n    const response = await api.put(\"/candidato/profile\", dados);\n    return response.data;\n  } catch (error) {\n    console.error(\"Erro ao atualizar perfil:\", error);\n    return null;\n  }\n};\nexport default api;","map":{"version":3,"names":["axios","API_URL","process","env","api","create","baseURL","interceptors","request","use","config","token","localStorage","getItem","console","log","headers","Authorization","registrarCandidato","dados","response","post","data","error","registrarEmpresa","logarCandidato","email","senha","logarEmpresa","criarVaga","listarVagas","get","candidatarVaga","id_vaga","curriculo","listarCandidaturas","atualizarPerfil","put"],"sources":["C:/Users/Cauã Bonfim/Desktop/ConnectVagas/frontend/src/services/api.js"],"sourcesContent":["import axios from \"axios\";\r\n\r\nconst API_URL = process.env.API_URL || \"http://localhost:3001\";\r\n\r\nconst api = axios.create({\r\n    baseURL: API_URL,\r\n})\r\n\r\napi.interceptors.request.use((config)=>{\r\n    const token = localStorage.getItem(\"token\");\r\n    console.log(\"Token enviado na requisição:\", token);\r\n    if(token){\r\n        config.headers.Authorization = `Bearer ${token}`;\r\n    }\r\n    return config;\r\n});\r\n\r\n//registrar candidato\r\nexport const registrarCandidato = async (dados) =>{\r\n    try{\r\n        const response = await api.post(\"/register/candidato\", dados);\r\n        return response.data;\r\n    }catch(error){\r\n        console.error(\"Erro ao registrar candidato:\", error);\r\n        return null;\r\n    }\r\n}\r\n\r\n//registrar empresa\r\nexport const registrarEmpresa = async (dados) =>{\r\n    try{\r\n        const response = await api.post(\"/register/empresa\", dados);\r\n        return response.data;\r\n    }catch(error){\r\n        console.error(\"Erro ao registrar empresa:\", error)\r\n        return null;    \r\n    }\r\n}\r\n\r\n//logar candidato\r\nexport const logarCandidato = async (email, senha)=>{\r\n    try{\r\n        const response = await api.post(\"/login/candidato\", {email, senha});\r\n        return response.data;\r\n    }catch(error){\r\n        console.error(\"Ocorreu um erro ao tentar logar: \", error)\r\n        return null;\r\n    }\r\n}\r\n\r\n\r\n//logar empresa\r\nexport const logarEmpresa = async (email, senha)=>{\r\n    try{\r\n        const response = await api.post(\"/login/empresa\", {email, senha});\r\n        return response.data;\r\n    }catch(error){\r\n        console.error(\"Ocorreu um erro ao tentar logar\", error);\r\n    }\r\n}\r\n\r\n//criar vaga\r\nexport const criarVaga = async (dados) =>{\r\n    try{\r\n        const response = await api.post(\"/publicarVaga\", dados);\r\n        return response.data;\r\n    }catch(error){\r\n        console.error(\"Ocorreu erro ao tentar publicar a vaga: \", error);\r\n        return null;\r\n    }\r\n}\r\n\r\n\r\n//lista de vagas\r\nexport const listarVagas = async ()=>{\r\n    try{\r\n        const response = await api.get(\"/\");\r\n        return response.data;\r\n    }catch (error){\r\n        console.error(\"Erro ao buscar vagas:\", error);\r\n        return null;\r\n    }\r\n};\r\n\r\n//candidatar-se\r\nexport const candidatarVaga = async (id_vaga, curriculo)=>{\r\n    try{\r\n        const response = await api.post(\"/candidatar\", {id_vaga, curriculo});\r\n        return response.data;\r\n    }catch(error){\r\n        console.error(\"Erro ao se candidatar:\", error);\r\n        return null;\r\n    }\r\n}\r\n\r\n//listar Candidaturas\r\nexport const listarCandidaturas = async (id_vaga) =>{\r\n    try{\r\n        const response = await api.get(`/candidaturas/${id_vaga}`);\r\n        return response.data;\r\n    }catch(error){\r\n        console.error(\"Ocorreu um erro ao buscar candidaturas\", error);\r\n        return null;\r\n    }\r\n}\r\n\r\n//atualizar perfil do candidato\r\nexport const atualizarPerfil = async(dados) =>{\r\n    try{\r\n        const response = await api.put(\"/candidato/profile\", dados);\r\n        return response.data;\r\n    } catch(error){\r\n        console.error(\"Erro ao atualizar perfil:\", error)\r\n        return null;\r\n    }\r\n}\r\n\r\n\r\nexport default api;"],"mappings":"AAAA,OAAOA,KAAK,MAAM,OAAO;AAEzB,MAAMC,OAAO,GAAGC,OAAO,CAACC,GAAG,CAACF,OAAO,IAAI,uBAAuB;AAE9D,MAAMG,GAAG,GAAGJ,KAAK,CAACK,MAAM,CAAC;EACrBC,OAAO,EAAEL;AACb,CAAC,CAAC;AAEFG,GAAG,CAACG,YAAY,CAACC,OAAO,CAACC,GAAG,CAAEC,MAAM,IAAG;EACnC,MAAMC,KAAK,GAAGC,YAAY,CAACC,OAAO,CAAC,OAAO,CAAC;EAC3CC,OAAO,CAACC,GAAG,CAAC,8BAA8B,EAAEJ,KAAK,CAAC;EAClD,IAAGA,KAAK,EAAC;IACLD,MAAM,CAACM,OAAO,CAACC,aAAa,GAAG,UAAUN,KAAK,EAAE;EACpD;EACA,OAAOD,MAAM;AACjB,CAAC,CAAC;;AAEF;AACA,OAAO,MAAMQ,kBAAkB,GAAG,MAAOC,KAAK,IAAI;EAC9C,IAAG;IACC,MAAMC,QAAQ,GAAG,MAAMhB,GAAG,CAACiB,IAAI,CAAC,qBAAqB,EAAEF,KAAK,CAAC;IAC7D,OAAOC,QAAQ,CAACE,IAAI;EACxB,CAAC,QAAMC,KAAK,EAAC;IACTT,OAAO,CAACS,KAAK,CAAC,8BAA8B,EAAEA,KAAK,CAAC;IACpD,OAAO,IAAI;EACf;AACJ,CAAC;;AAED;AACA,OAAO,MAAMC,gBAAgB,GAAG,MAAOL,KAAK,IAAI;EAC5C,IAAG;IACC,MAAMC,QAAQ,GAAG,MAAMhB,GAAG,CAACiB,IAAI,CAAC,mBAAmB,EAAEF,KAAK,CAAC;IAC3D,OAAOC,QAAQ,CAACE,IAAI;EACxB,CAAC,QAAMC,KAAK,EAAC;IACTT,OAAO,CAACS,KAAK,CAAC,4BAA4B,EAAEA,KAAK,CAAC;IAClD,OAAO,IAAI;EACf;AACJ,CAAC;;AAED;AACA,OAAO,MAAME,cAAc,GAAG,MAAAA,CAAOC,KAAK,EAAEC,KAAK,KAAG;EAChD,IAAG;IACC,MAAMP,QAAQ,GAAG,MAAMhB,GAAG,CAACiB,IAAI,CAAC,kBAAkB,EAAE;MAACK,KAAK;MAAEC;IAAK,CAAC,CAAC;IACnE,OAAOP,QAAQ,CAACE,IAAI;EACxB,CAAC,QAAMC,KAAK,EAAC;IACTT,OAAO,CAACS,KAAK,CAAC,mCAAmC,EAAEA,KAAK,CAAC;IACzD,OAAO,IAAI;EACf;AACJ,CAAC;;AAGD;AACA,OAAO,MAAMK,YAAY,GAAG,MAAAA,CAAOF,KAAK,EAAEC,KAAK,KAAG;EAC9C,IAAG;IACC,MAAMP,QAAQ,GAAG,MAAMhB,GAAG,CAACiB,IAAI,CAAC,gBAAgB,EAAE;MAACK,KAAK;MAAEC;IAAK,CAAC,CAAC;IACjE,OAAOP,QAAQ,CAACE,IAAI;EACxB,CAAC,QAAMC,KAAK,EAAC;IACTT,OAAO,CAACS,KAAK,CAAC,iCAAiC,EAAEA,KAAK,CAAC;EAC3D;AACJ,CAAC;;AAED;AACA,OAAO,MAAMM,SAAS,GAAG,MAAOV,KAAK,IAAI;EACrC,IAAG;IACC,MAAMC,QAAQ,GAAG,MAAMhB,GAAG,CAACiB,IAAI,CAAC,eAAe,EAAEF,KAAK,CAAC;IACvD,OAAOC,QAAQ,CAACE,IAAI;EACxB,CAAC,QAAMC,KAAK,EAAC;IACTT,OAAO,CAACS,KAAK,CAAC,0CAA0C,EAAEA,KAAK,CAAC;IAChE,OAAO,IAAI;EACf;AACJ,CAAC;;AAGD;AACA,OAAO,MAAMO,WAAW,GAAG,MAAAA,CAAA,KAAU;EACjC,IAAG;IACC,MAAMV,QAAQ,GAAG,MAAMhB,GAAG,CAAC2B,GAAG,CAAC,GAAG,CAAC;IACnC,OAAOX,QAAQ,CAACE,IAAI;EACxB,CAAC,QAAOC,KAAK,EAAC;IACVT,OAAO,CAACS,KAAK,CAAC,uBAAuB,EAAEA,KAAK,CAAC;IAC7C,OAAO,IAAI;EACf;AACJ,CAAC;;AAED;AACA,OAAO,MAAMS,cAAc,GAAG,MAAAA,CAAOC,OAAO,EAAEC,SAAS,KAAG;EACtD,IAAG;IACC,MAAMd,QAAQ,GAAG,MAAMhB,GAAG,CAACiB,IAAI,CAAC,aAAa,EAAE;MAACY,OAAO;MAAEC;IAAS,CAAC,CAAC;IACpE,OAAOd,QAAQ,CAACE,IAAI;EACxB,CAAC,QAAMC,KAAK,EAAC;IACTT,OAAO,CAACS,KAAK,CAAC,wBAAwB,EAAEA,KAAK,CAAC;IAC9C,OAAO,IAAI;EACf;AACJ,CAAC;;AAED;AACA,OAAO,MAAMY,kBAAkB,GAAG,MAAOF,OAAO,IAAI;EAChD,IAAG;IACC,MAAMb,QAAQ,GAAG,MAAMhB,GAAG,CAAC2B,GAAG,CAAC,iBAAiBE,OAAO,EAAE,CAAC;IAC1D,OAAOb,QAAQ,CAACE,IAAI;EACxB,CAAC,QAAMC,KAAK,EAAC;IACTT,OAAO,CAACS,KAAK,CAAC,wCAAwC,EAAEA,KAAK,CAAC;IAC9D,OAAO,IAAI;EACf;AACJ,CAAC;;AAED;AACA,OAAO,MAAMa,eAAe,GAAG,MAAMjB,KAAK,IAAI;EAC1C,IAAG;IACC,MAAMC,QAAQ,GAAG,MAAMhB,GAAG,CAACiC,GAAG,CAAC,oBAAoB,EAAElB,KAAK,CAAC;IAC3D,OAAOC,QAAQ,CAACE,IAAI;EACxB,CAAC,CAAC,OAAMC,KAAK,EAAC;IACVT,OAAO,CAACS,KAAK,CAAC,2BAA2B,EAAEA,KAAK,CAAC;IACjD,OAAO,IAAI;EACf;AACJ,CAAC;AAGD,eAAenB,GAAG","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}